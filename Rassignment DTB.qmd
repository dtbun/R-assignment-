---
title: R assignment
Authour: Daniel Bun
format: html
editor: visual
---

# Introduction

Hello, here is the code for the EEOB/BCB 546 2024 spring class. The goal of this assignment is to inspect 2 datafiles, process them for data analysis, and then utilize visualization package(s) in R to show the data.

Data visualization only has inspection of column number, row number, and file size.

Data processing we are taking the 2 files and combining them. This involves a transposing step as one file is oriented differently. Then we want to filter the files for certain data, i.e. SNP by chromosome, multiple, or missing data as commented in the code.

Lastly, there are graphs created to visually show certain data.

```{r}
library(tidyverse)
library(tidyr)
library(data.table)
library(dplyr)

##File inspection

#read from tab delimited file into dataframe snp
snp <- read_tsv("snp_position.txt")

file.size("snp_position.txt")
#filesize is 83747 bytes

structure(snp)
#983 rows
#15 columns

#ncol(snp) and nrow(snp) can be used too, but structure has both

fang <- read_tsv("fang_et_al_genotypes.txt")

file.size("fang_et_al_genotypes.txt")
#11054722 bytes file size

structure(fang)
#2782 rows
#986 columns


##DATA PROCESSING MAIZE

#take the necessary columns, SNP_ID, Chromosome, and Position. Then order by SNP_ID.
snp_f <- arrange(snp[c(1,3,4)], SNP_ID)

#Filter for rows with ZMM maize groups
maize <- filter(fang, startsWith(Group, 'ZMM')) 

#transpose, add back column and row names. Take row names and make it a column to be used for the merge.
maize_t <- transpose(maize)
rownames(maize_t) <- colnames(maize)
colnames(maize_t) <- rownames(maize)
setDT(maize_t, keep.rownames = TRUE)
colnames(maize_t)[colnames(maize_t) == 'rn'] <- 'SNP_ID'

#Merge snp and filtered/transposed maize file following SNP_ID.
maize_snp <- merge(snp_f, maize_t, by = 'SNP_ID')

#for loop to make all the necessary files with increasing order of position.
for(i in 1:10) {
  maize_inc <- arrange(filter(maize_snp, Chromosome == i), Position)
  write_tsv(maize_inc, sprintf("maize_inc_%d.txt",i))
}

#For loop to make all the necessary files with decreasing order of position.
for(i in 1:10) {
  maize_de <- arrange(filter(maize_snp, Chromosome == i), desc(Position))
  maize_de[maize_de == '?/?'] <- '-/-'
  maize_dec <- maize_de
  write_tsv(maize_dec, sprintf("maize_dec_%d.txt",i))
}

#Extra from the UNIX assignment to get unknowns and multiples file.
maize_unknowns <- filter(maize_snp, Chromosome == "unknown")
write_tsv(maize_unknowns, "maize_unknown.txt")

maize_multiples <- filter(maize_snp, Chromosome =="multiple")
write_tsv(maize_multiples, "maize_multiple.txt")


##DATA PROCESSING TEOSINTE 

#Filter for teosinte group.
teosinte <- filter(fang, startsWith(Group, 'ZMP')) 

#Transpose and add back column/row names. Then add column name to be used later.
teosinte_t <- transpose(teosinte)
rownames(teosinte_t) <- colnames(teosinte)
colnames(teosinte_t) <- rownames(teosinte)
setDT(teosinte_t, keep.rownames = TRUE)
colnames(teosinte_t)[colnames(teosinte_t) == 'rn'] <- 'SNP_ID'

#Merged snp and teosinte filtered data, matching by SNP_ID
teosinte_snp <- merge(snp_f, teosinte_t, by = 'SNP_ID')

#for loop to filter teosinte SNP for chromosome i, then arrange by position increasing. Print out a txt file.
for(i in 1:10) {
  teosinte_inc <- arrange(filter(teosinte_snp, Chromosome == i), Position)
  write_tsv(teosinte_inc, sprintf("teosinte_inc_%d.txt",i))
}

#for loop to filter teosinte SNP for chromosome i, then arrange by position decreasing and replace ?/? with -/-. Print out a txt file.
for(i in 1:10) {
  teosinte_de <- arrange(filter(teosinte_snp, Chromosome == i), desc(Position))
  teosinte_de[teosinte_de == '?/?'] <- '-/-'
  teosinte_dec <- teosinte_de
  write_tsv(teosinte_dec, sprintf("teosinte_dec_%d.txt",i))
}

#Extras from UNIX assignment for unknown and multiple.
teosinte_unknowns <- filter(teosinte_snp, Chromosome == "unknown")
write_tsv(teosinte_unknowns, "teosinte_unknown.txt")

teosinte_multiples <- filter(teosinte_snp, Chromosome =="multiple")
write_tsv(teosinte_multiples, "teosinte_multiple.txt")


##Visualization

install.packages("furniture")
library("furniture")

#pipe maize_snp to count chromosome of maize and teosinte counts.
maize_counts <- maize_snp %>% count(Chromosome, sort = TRUE)
teosinte_counts <- teosinte_snp %>% count(Chromosome, sort = TRUE)

#evidently the two, maize and teosinte, are the same. However maize would have more SNP data due to having more columns.
#Mapping maize and teosinte counts.
ggplot() + geom_col(data = maize_counts, mapping = aes(x=Chromosome, y=n))
ggplot() + geom_col(data = teosinte_counts, mapping = aes(x=Chromosome, y=n))

#Searching and counting for number of homozygous and making a dataframe for it
homozygous_maize <- data.frame(rowsums(maize_snp == "A/A" | maize_snp =="T/T" | maize_snp == "C/C" | maize_snp == "G/G", na.rm = FALSE))

#Searching and counting for heterozygous data and adding to dataframe 
heterozygous_maize <- data.frame(data.frame(rowsums(maize_snp == "A/T" | maize_snp =="A/C" | maize_snp == "A/G" | maize_snp == "T/A" | maize_snp == "T/C" | maize_snp == "T/G" | maize_snp == "C/A" | maize_snp == "C/T" | maize_snp == "C/G" | maize_snp == "G/A" | maize_snp == "G/T" | maize_snp == "G/C", na.rm = FALSE)))

#searching for and counting missing
missing_maize <- data.frame(rowsums(maize_snp == "?/?", na.rm = FALSE))

#Making the ratio for homo and hetero from the 2 previous dataframes
ratio_homo_hetero <- data.frame(homozygous_maize/heterozygous_maize)

#remove infinite where division by zero.
ratio_homo_hetero[sapply(ratio_homo_hetero, is.infinite)] <- NA

#ADD SNP number due to needing numerical data to actually graph.
SNP_number <- c(1:983)

#Combine all data into one dataframe and then rename the columns as needed.
maizeviz <- data.frame(SNP_number, maize_snp[1:3], homozygous_maize, heterozygous_maize, missing_maize, ratio_homo_hetero)

colnames(maizeviz)[1] <- 'SNP_number'
colnames(maizeviz)[4] <- 'homozygous'
colnames(maizeviz)[5] <- 'heterozygous'
colnames(maizeviz)[6] <- 'missing'
colnames(maizeviz)[7] <- 'homozygous/heterozygous'

##need to fix the graphs I guess.
#graph homozygous maize
ggplot() + geom_bar(maizeviz, mapping = aes(x= SNP_number, y= homozygous), stat = "identity") + scale_x_continuous() + labs(title = "Amount of Homozygous SNP Sites in Maize", x = "SNP ID", y = "Amount of Homozygous SNPs")

#graph heterozygous maize
ggplot() + geom_bar(maizeviz, mapping = aes(x= SNP_number, y= heterozygous), stat = "identity") + scale_x_continuous() + labs(title = "Amount of Heterozygous SNP Sites in Maize", x = "SNP ID", y = "Amount of Heterozygous SNPs")

#graph missing for maize
ggplot() + geom_bar(maizeviz, mapping = aes(x= SNP_number, y= missing), stat = "identity") + scale_x_continuous() + labs(title = "Amount of Missing SNP Sites in Maize", x = "SNP ID", y = "Amount of Missing SNPs")

#plot ratio maize
ggplot() + geom_bar(maizeviz, mapping = aes(x= SNP_number, y= "homozygous/heterozysgous"), stat = "identity") + scale_x_continuous() + labs(title = "Proportion of homozygous and heterozygous in Maize", x = "SNP ID", y = "Proportion of homozygous and heterozygous")

##TEOSINTE SIDE

#count homozygous teosinte
homozygous_teosinte <- data.frame(rowsums(teosinte_snp == "A/A" | teosinte_snp =="T/T" | teosinte_snp == "C/C" | teosinte_snp == "G/G", na.rm = FALSE))

#count heterozygous teosinte
heterozygous_teosinte <- data.frame(data.frame(rowsums(teosinte_snp == "A/T" | teosinte_snp =="A/C" | teosinte_snp == "A/G" | teosinte_snp == "T/A" | teosinte_snp == "T/C" | teosinte_snp == "T/G" | teosinte_snp == "C/A" | teosinte_snp == "C/T" | teosinte_snp == "C/G" | teosinte_snp == "G/A" | teosinte_snp == "G/T" | teosinte_snp == "G/C", na.rm = FALSE)))

#count missing teosinte
missing_teosinte <- data.frame(rowsums(teosinte_snp == "?/?", na.rm = FALSE))

#ratio teosinte
ratio_homo_hetero <- data.frame(homozygous_teosinte/heterozygous_teosinte)

#ratio remove infinite for the hetero 0 data, stop division by zero
ratio_homo_hetero[sapply(ratio_homo_hetero, is.infinite)] <- NA

#add numerical data to graph from for x axis
SNP_number <- c(1:983)

#create dataframe for teosinte and then rename columns as needed.
teosinteviz <- data.frame(SNP_number, teosinte_snp[1:3], homozygous_teosinte, heterozygous_teosinte, missing_teosinte, ratio_homo_hetero)

colnames(teosinteviz)[1] <- 'SNP_number'
colnames(teosinteviz)[4] <- 'homozygous'
colnames(teosinteviz)[5] <- 'heterozygous'
colnames(teosinteviz)[6] <- 'missing'
colnames(teosinteviz)[7] <- 'homozygous/heterozygous'

##need to fix plots I know

#graph homozygous for teosinte
ggplot() + geom_bar(teosinteviz, mapping = aes(x= SNP_number, y= homozygous), stat = "identity") + scale_x_continuous() + labs(title = "Amount of Homozygous SNP Sites in Teosinte", x = "SNP ID", y = "Amount of Homozygous SNPs")

#graph heterozygous for teosinte
ggplot() + geom_bar(teosinteviz, mapping = aes(x= SNP_number, y= heterozygous), stat = "identity") + scale_x_continuous() + labs(title = "Amount of Heterozygous SNP Sites in Teosinte", x = "SNP ID", y = "Amount of Heterozygous SNPs")

#graph missing for teosinte
ggplot() + geom_bar(teosinteviz, mapping = aes(x= SNP_number, y= missing), stat = "identity") + scale_x_continuous() + labs(title = "Amount of Missing SNP Sites in Teosinte", x = "SNP ID", y = "Amount of Missing SNPs")

#graph ratio
ggplot() + geom_bar(teosinteviz, mapping = aes(x= SNP_number, y= "homozygous/heterozysgous"), stat = "identity") + scale_x_continuous() + labs(title = "Proportion of homozygous and heterozygous in Teosinte", x = "SNP ID", y = "Proportion of homozygous and heterozygous")

#look for AT
maize_AT <- data.frame(rowsums(maize_snp == "A/A" | maize_snp =="T/T" | maize_snp == "A/T" | maize_snp == "T/A" , na.rm = FALSE))

#look for AT
teosinte_AT <- data.frame(rowsums(teosinte_snp == "A/A" | teosinte_snp =="T/T", teosinte_snp == "A/T" | teosinte_snp == "T/A", na.rm = FALSE))

#add to previous big dataframe to graph from and rename column as needed.
maizead <- data.frame(maizeviz, maize_AT)
teosintead <- data.frame(teosinteviz, teosinte_AT)
colnames(maizeviz)[8] <- 'AT amount'
colnames(teosinteviz)[8] <- 'AT amount'

#graph AT amount
ggplot() + geom_col(data = maizead, mapping = aes(x=SNP_number, y='AT amount'))
ggplot() + geom_col(data = teosintead, mapping = aes(x=SNP_number, y='AT amount'))

```
